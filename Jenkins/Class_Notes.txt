#########################
Day - 5 / 13th Apr. 2024 
#########################			
			
	Build Orchestration Tool - Jenkins!
	
	
	-- Jenkins is an open-source build Orchestration Tool
	
	-- Based on Master-Slave Architecture
	
	-- Used to create/automated end-to-end CICD Pipeline projects
	
	-- CICD Pipeline and jenkins automation can be created using Groovy Scripting Language!
	
	****Scripting Knowledge: shell scripting, groovy, yaml, python
	
	Jenkins 
	
	gitlab-ci
	
	azure-pipeline 
	
	aws-code-pipeline
	
	bamboo
	
	
	Jenkins can be used :
	
	
	Developers' Perspective :
		- Developers are just the consumers of Jenkins service
		
	DevOps Perspective :
	
		- DevOps Team are going to Own Jenkins!
		
		- Administration of Jenkins!
		
		Roles & Responsibilities :::
		
			- Installation of Jenkins		
			- Plugins Management 
			- Tools Management 
			- User Management
			- Security Management
			- Global System Management 
			
			- Create of CICD Pipelines Jobs/Project
			- Jenkins Master-Slave Nodes Configuration 
			- Onboard the Applications to Jenkins CICD process
			- Periodic Upgrade of Jenkins and Plugins 
			- Periodic Backup and Recovery
			- Trouble-Shooting!
		
		
	-	Jenkins Master-Slave Architecture:
	
		
			Jenkins_Master_Node(VM)		--> git, jdk, jenkins Tool (maven - plugins) 	# Jenkins by default runs in port 8080.
										--> Used to create Jenkins CICD Pipeline Projects/Jobs
										--> Schedule the Jobs to run in the slave Nodes.
										
				Jenkins_Slave_Node1(VM) --> git, jdk, maven(tool) 		# Java Application Build 
				Jenkins_Slave_Node2(VM) --> git, Python		 			# Python Application Build 
				Jenkins_Slave_Node3(VM) --> git, Angular	 			# Angular Application Build 
				Jenkins_Slave_Node4(VM) --> git, NodeJS		 			# NodeJS Application Build 
				Jenkins_Slave_Node5(VM) --> git, .Net-Core	 			# .Net Application Build 
				

	- Installation of Jenkins			# https://www.jenkins.io/doc/book/installing/
				
		Install Jenkins in Linux Machine :
		
			Ubuntu v20.04
				
				
		1. 	Launch EC2 Instance Ubuntu v20.04 		# Virtual Machine
		2. 	Connect to EC2 Instance :			using SSH 					port:	22
				- EC2 Instance Connect 		# Connect thru web browser 
				
				- SSH Agents 				# Windows Users 								# Host_Name, User_Name, Key/Token/Password
					- MobaXterm 			# https://mobaxterm.mobatek.net/download.html
					- Putty
					
				- Terminal 					#  Linux/Mac Users 
			
				SSH Authentication Methods::
				
					- Password based Auth 
					- Token based Auth 
					- Key based Auth 
					- Passwordless Auth 
				
		1 VM 	=> 750 Hrs/Month
		
		10 VMs	=> 75 Hrs/Month
		
		
		Linux Package Management :::
		
			Package Manager :
			
				Ubuntu 		--> apt-get / apt 
				RHEL/Centos --> yum
				Fedora		--> dnf 
				
		1. Install Pre-requisities 
		
		2. Install actual package 
			
		3. Post Installation Activities 

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#Install & Configure Jenkins Server :

	- Refer to that tools/Service's Official Documentation.
				https://www.jenkins.io/doc/book/installing/linux/

1. Install the pre-requisites :::

# Install Jdk:

sudo -i 			
sudo apt update -y

sudo apt install openjdk-17-jre -y 						
java -version						

2. Install the Actual tool :::
 								
#Install Jenkins:

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get update

sudo apt-get install jenkins -y

3. Perform Post_Installation Activities :::

jenkins --version 

systemctl status jenkins 

Open web browser :

http://<Public_IP_Address>:8080/

E.g.: http://13.126.245.254:8080/

cat /var/lib/jenkins/secrets/initialAdminPassword

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`
	
		- Plugins Management 
		- Tools Management 
		- User Management
		- Security Management
		- Global System Management 			
	
Next: 
								
		- Create of CICD Pipelines Jobs/Project
		- Jenkins Master-Slave Nodes Configuration 
		- Onboard the Applications to Jenkins CICD process
		- Setup Tomcat Web Application Server to Deploy Web Application
		- Periodic Upgrade of Jenkins and Plugins 
		- Periodic Backup and Recovery
		- Trouble-Shooting!

#########################
Day - 6 / 14th Apr. 2024 
#########################	
			
		- Create of CICD Pipelines Jobs/Project
		- Jenkins Master-Slave Nodes Configuration 
		- Onboard the Applications to Jenkins CICD process
		- Setup Tomcat Web Application Server to Deploy Web Application
		- Periodic Upgrade of Jenkins and Plugins 
		- Periodic Backup and Recovery
		- Trouble-Shooting!
	
		
		- Create of CICD Pipelines Jobs/Project
		
		
		Jenkins Jobs :
		
			- Free-style Projects/Jobs			# Based on manual configuration
			
				
			
			- Pipeline Projects/Jobs 			# Created using Groovy Script
			
				- Scripted Pipeline 
				
				- Declarative Pipeline
				
					- Snippet Generator 
				
				
			Jenkins 
			
			gitlab-ci 				*.yaml script		# Declarative Scripts --> Key:Value Pair
			azure pipeline 
			
			
		Jenkins : Master / Slave Nodes.
		
		
	-	Jenkins Master-Slave Architecture:
	
		
			Jenkins_Master_Node(VM)		--> git, jdk, jenkins Tool (maven - plugins) 	# Jenkins by default runs in port 8080.
										--> Used to create Jenkins CICD Pipeline Projects/Jobs
										--> Schedule the Jobs to run in the slave Nodes.
										slavenode1
										
				Jenkins_Slave_Node1(VM) --> git, jdk, maven(tool) 		# Java Application Build 
				
						devopsadmin
				
				
			2 VMs 
		
			Using SSH Conn. Integrate Jenkins_Slave & Master
			
				- Host_Name 
				- Port 22 
				- User_Name 
				- SSH Key	- Public and Private Key
				
				
		Maven Build Tool :
		
			- Used to Build Java Applications :
			
				- pom.xml file 			# Is used to identify the dependencies and plugins to build Java Projects.
				- maven goals 
					- compile	- Compile the src_code 
					- test 		- This is compile and perform unit testing 
					- package	- Compile, test and create artifacts (Binaries - *.war/*.jar) - Binaries are created in target/
					- clean 	- used to clean the target folder 
					
			Eg.: 
			
				mvn clean package 		#
				
		

#Configure Slave Node1 for Java Maven App. :

sudo -i

apt update -y 

Install Java ::

sudo apt update -y 
sudo apt install openjdk-11-jre -y
java -version

Install GIT :

sudo apt install git -y

Install Maven - Build Tool :
https://maven.apache.org/install.html

sudo apt install maven -y 

#sudo apt install docker.io -y

Create User in Jenkins Slave Machine & Create SSH Keys 

	SSH Keys --> is composed of public and private keys 


#Add User : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
ssh-keygen -t rsa -b 1024 -m PEM


ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public


cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh


	x = 5

		
	Handling Variables :::
	
		Environment Variables
		
		User Defined Variables 
	
	
				
			
			- Pipeline Projects/Jobs 			# Created using Groovy Script
			
				- Scripted Pipeline 
				
				- Declarative Pipeline
				
					- Snippet Generator 	
					
	Pipeline Project:
	
	Pipeline :
	
		Stages{
			stage1 {
				step1
				step2
				step3
				}
			}
			stage2 {
				step1
				step2
				step3
				}
			}			
		} 
		
pipeline {
    agent { label 'slavenode1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
				
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Maven Application Build'
				sh 'mvn clean package'
            }
        }
        stage('Deploy to Test Environment') {
            steps {
                echo 'Perform Deployment'
            }
        }	
    }
}
		

			Java_Web_Application : github 
				DevOps Approach ::
					- Code the Application 
					- Save / Commit the source code in a source code repository.
						https://github.com/LoksaiETA/Java-mvn-app2.git
					
					Automate :
						- build (Maven)- Process of Compiling the code and create artifacts(Binaries - *.war/*.jar/*.exec/*.dll)
						- Unit Testing 
						- Promote the code to test environment for further testing 
						- Notify the Testing Team thru emails 					
				
			
		
Next :

	Setup the Tomcat Web Application Server 
	
	CICD Pipeline 
	
	Automate Build using Build triggers
	
	Email Notifications
	
	Ansible 

	
#########################
Day - 7 / 20th Apr. 2024 
#########################	
	
	Setup the Tomcat Web Application Server 	
	
	CICD Pipeline 
	
	Automate Build using Build triggers
	
	Email Notifications

	IAC Tools :
		Fundamentals of Ansible 	
		
		Fundamentals of Terraform
	
	
	Setup the Tomcat Web Application Server in Jenkins.

		Jenkins_Master_Node			--> Create CICD Pipeline Jobs and Schedule to run in Slave_Node
			Jenkins_Slave_Node1		--> Application Build - Compile, Unit testing, create artifacts - *.war
		
		
		Target_Server/Hosted_Server/Deployment_Server (VM)			--> port 8080
			- Used to run the web application artifacts.
			
				- Tomcat is the web application Server 				--> Default Port 8080
				
				- jdk, tomcat
				- user_name & Credentials(ssh-keys)
				
				
		Environments :::
		
		Non-Prod Environments											Production Environments
		
			Dev Environment
			Build Environment
			Test Environment
				- QA 	- Quality Assurance Testing 
				- UAT 	- User Acceptance Testing 			---->			Prod Environment
	
	
		Deployment :::
		
			Copying the artifacts from source server to target server 
			
			
			Source Server													Target Server 
			
				Jenkins_SlaveNode1												Tomcat Server

			Source Directory												Target Directory
			
				target/mvn-hello-world.war										/opt/tomcat/webapps/mvn-hello-world.war
	
	
	
		In Jenkins Master Node :
		
			Plugins : Publish over SSH Plugins 			# Used to safely copy the artifacts
			
			Install Publish over ssh plugins and restart jenkins server.
	
pipeline {
    agent { label 'slavenode1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM_Checkout'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
				
            }
              post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'lo23@gmail.com', body: "${BUILD_URL} The Job Status", cc: 'l23@gmail.com', from: '', replyTo: '', subject: 'SCM Checkout Failed', to: 'lo3@gmail.com,lo23@gmail.com,lo23@gmail.com'
                }
              }
        }
		
        stage('Application Build') {
            steps {
                echo 'Perform Maven Application Build'
				sh 'mvn clean package'
            }
              post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'lo3@gmail.com', body: "${BUILD_URL} The Job Status", cc: 'l23@gmail.com', from: '', replyTo: '', subject: 'BUILD Failed', to: 'l3@gmail.com,l23@gmail.com,l3@gmail.com'
                }
              }
        }
        stage('Deploy to Tomcat Server') {
            steps {
				script{
				sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
				}
            }
              post {
                success {
                  sh "echo 'Send mail on Successful'"
					mail bcc: 'lok@gmail.com', body: "${BUILD_URL} The Job Status", cc: 'l3@gmail.com', from: '', replyTo: '', subject: 'Deployment Successful', to: 'l23@gmail.com,lo23@gmail.com,l23@gmail.com'
                }
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l23@gmail.com', body: "${BUILD_URL} The Job Status", cc: 'l3@gmail.com', from: '', replyTo: '', subject: 'Deployment Failed', to: 'lo23@gmail.com,l3@gmail.com,lo23@gmail.com'
                }
              }
        }	
    }
}	

	archetype	
	
	target/
		mywebapp.war
			svc1.jar 
			svc2.jar
			svc3.jar
	
	
	Automate the Build and Deployment :::
	
		Build Triggers :
		
			- Build Periodic 			https://crontab.guru/
			
				- Jenkins_Job --> execute for every 5 mins 

				Eg.: 
					Environments :::
					
					Non-Prod Environments											Production Environments
					
						Dev Environment
						Build Environment
						Test Environment
							- QA 	- Quality Assurance Testing 
							- UAT 	- User Acceptance Testing 			---->			Prod Environment - s1,2,3,4,5
				
						8am to 10pm
						
						job1 - start the servers - 8AM
						job2 - stop the servers  - 10PM
					
					Memory Management
	
			- Github Webhook
			
				Create a webhook in github repository 
				- It is used to trigger the build for every commit in the remote repo.
				
				
					http://65.2.63.88:8080/github-webhook/
					
					http://localhost:8080/job/DCP-WE-PipelineProj1/
					
					<Jenkins_Master_public_ip_Address:8080/github-webhook/
					

			
			- Poll SCM 
			
				Test Cycle :::
				
				QA _Testing start - 8AM,12PM,3PM
				
				Between 8 and 12 --> make any no. of changes in the repo.
				
				-- It is same as build periodic and github webhook 
				
				-- It is schedule to run at a specific time only if there is any changes happened in the the remote repo.
				
					Schedule -> 8AM , 12PM, 3PM
			
	Email Notifications	::::
	
	DevOps Lifecyle :::
	
				DevOps Approach ::
					- Code the Application 
					- Save / Commit the source code in a source code repository.
					
					Automate :
						- build (Maven)- Process of Compiling the code and create artifacts(Binaries - *.war/*.jar/*.exec/*.dll)
						- Unit Testing 
						- Promote the code to test environment for further testing 
						- Notify the Testing Team thru emails 

	gmail account!
	
		Using E_Mail Notifications Plugins, we need to configure Email Server ::
		
		
		success
		failure
		unstable
		
	
		SMTP Server :
		smtp.gmail.com

		SMTP Authentication

		SMTP Port :: 465

		Login to Gmail :::

		Click Manage Account Settings

		@Left side panel - select Security tab

		Two - way Authentication - MFA --> mobile#

		search for Apppassword

		App Password = 16 bytes of App Password btnl ltzr
		What ? window
		Which Appln - email	
